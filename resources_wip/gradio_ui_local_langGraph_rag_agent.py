# --- Import necessary libraries ---
import gradio as gr
import os
import json
from typing import Dict
from local_langGraph_rag_agent import workflow  # Import your workflow setup from the script
from dotenv import load_dotenv

# --- Load Environment Variables from .env File ---
load_dotenv()  # Load environment variables from .env file


# --- Define a function to run the agent workflow ---
def run_agent(question: str) -> str:
    """
    Function to execute the agent workflow based on user input.
    :param question: The user question.
    :return: Answer generated by the agent.
    """
    try:
        # Set up the initial state for the workflow
        inputs = {"question": question, "max_retries": 3}

        # Execute the workflow and capture the response
        output = []
        for event in workflow.stream(inputs, stream_mode="values"):
            output.append(event)

        # Collect the final response if available
        return json.dumps(output, indent=2)
    except Exception as e:
        return f"An error occurred: {str(e)}"


# --- Define Gradio Interface ---
interface = gr.Interface(
    fn=run_agent,  # Function to call when interacting with the interface
    inputs=gr.inputs.Textbox(lines=2, placeholder="Enter your question here..."),
    outputs="text",
    title="LangChain RAG Agent",
    description="An interactive assistant using a local LLaMA model to answer questions using RAG.",
    allow_flagging="never"
)

# --- Launch the Gradio App ---
if __name__ == "__main__":
    # Launch the interface
    interface.launch()
